lang	:-	(declaration | statement | class_declaration)*
		;

statement	:-	block
			|	full_variable_declaration
			|	cycle_statement
			|	selection_statement
			|	jump_statements
			|	return_statement
			|	arifmetic_expression_list
			|	SEMICOLON
			;

full_variable_declaration	:-	type_specification variable_declaration?
							;

block 	:-	L_FIG statement* R_FIG
		;

declaration	:-	type_specification (function_declaration | 
									variable_declaration?)
			|	VOID function_declaration
			;

class_declaration	:-	CLASS IDENTIFIER class_block
					;

class_block	:-	L_FIG declaration* R_FIG
			;

type_specification	:-	specificator array_declaration_part? IDENTIFIER
					;

specificator	:-	templated_specificator 
				|	simple_specificator
				;

templated_specificator	:- TEMPLATED_TYPE L_TRG specificator (COMMA specificator)* R_TRG
						;

simple_specificator	:-	SIMPLE_TYPE 
					|	CLASS_TYPE
					;

array_declaration_part	:-	L_SQR INT R_SQR
						;

function_declaration	:-	L_RND attributes_list? R_RND after_keyword
						;

attributes_list	:-	type_specification (COMMA type_specification)*
				;

variable_declaration	:-	(STRONG_ASSIGN_OP arifmetic_expression)? extended_declaration*
						;

extended_declaration	:-	COMMA IDENTIFIER (STRONG_ASSIGN_OP arifmetic_expression)?
						;

return_statement	:-	RETURN arifmetic_expression?
					;

cycle_statement	:-	FOR for_condition_expr after_keyword
				|	WHILE condition_expr after_keyword
				|	// DO after_keyword WHILE condition_expr SEMICOLON?
				;

for_condition_expr	:-	L_RND (full_variable_declaration | arifmetic_expression_list)? SEMICOLON condition? SEMICOLON arifmetic_expression_list? R_RND
					;

selection_statement	:-	IF condition_expr after_keyword (ELIF condition_expr after_keyword)* (ELSE after_keyword)?
					|	// SELECT ?
					;

after_keyword	:-	block
				|	statement
				;

jump_statements	:-	BREAK
				|	CONTINUE
				;

condition_expr	:-	L_RND condition R_RND
				;

condition	:-	arifmetic_expression
			;

arifmetic_expression_list	:-	arifmetic_expression (COMMA arifmetic_expression)*
							;

arifmetic_expression	:-	unary_expression (BINAR_OP arifmetic_expression)?
						;

unary_expression	:-	OP_UNAR_PREF unary_expression
					|	OP_UNAR_BINAR unary_expression
					|	postfix_expression OP_UNAR_POST*
					;

postfix_expression	:-	literal
					|	L_RND arifmetic_expression R_RND
					;

literal	:-	IDENTIFIER call*
		|	STRING
		|	INT
		|	FLOAT
		;

call	:-	L_RND arifmetic_expression_list? R_RND
		|	L_SQR arifmetic_expression R_SQR
		;













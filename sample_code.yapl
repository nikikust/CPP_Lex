class Node template T
{
	T data
	ptr< Node<T> > next
	ptr< Node<T> > previous
	ptr< Node<T> > _nullptr

	bool hasNext()
	{
		return next == _nullptr
	}

	bool hasPrevious()
	{
		return previous == _nullptr
	}
	
}

class LinkedList template T
{
	ptr< Node<T> > _front, _back
	ptr< Node<T> > _nullptr
	int _size

	void push_front(T data)
	{
		Node<T> newNode
		
		newNode.data = data
		ptr< Node<T> > node = &newNode
		
		
		if (_size == 0)
		{
			_front = node
			_back = node
		}
		else
		{
			(*_front).previous = node;
			(*node).next = _front
			_front = node
		}
		++<_size
	}

	void push_back(T data)
	{
		Node<T> newNode
		
		newNode.data = data
		ptr< Node<T> > node = &newNode
		
		if (_size == 0)
		{
			_front = node
			_back = node
		}
		else
		{
			(*_back).next = node;
			(*node).previous = _back
			_back = node
		}
		++<_size
	}
	
	void pop_front()
	{
		if ( _size == 0 )
		{
			print("\nList is empty. exit")
			exit
		}
		
		ptr< Node<T> > buf = _front
		_front = (*_front).next
		if (_front != _nullptr)
		{
			(*_front).previous = _nullptr
		}
		else
		{		
			_back = _nullptr
		}
		(*buf).next = _nullptr
		--<_size
	}
	
	void pop_back()
	{
		if ( _size == 0 )
		{
			print("\nList is empty. exit")
			exit
		}
		
		ptr< Node<T> > buf = _back
		_back = (*_back).previous
		if (_back != _nullptr)
		{
			(*_back).next = _nullptr
		}
		else
		{
			_front = _nullptr
		}
		(*buf).previous = _nullptr
		--<_size
	}
	
	T front()
	{
		if (_size == 0)
		{
			print("\nList is empty. exit")
			exit
		}
		return (*_front).data
	}
	
	T back()
	{
		if (_size == 0)
		{
			print("\nList is empty. exit")
			exit
		}		
		return (*_back).data
	}
	
	int size()
	{
		return _size
	}
	bool empty()
	{
		return _size == 0
	}
	
	void print_list()
	{
		ptr< Node<T> > cur = _front
		
		print("-")
		while (cur != _nullptr)
		{
			print(" " + (*cur).data + " -")
			cur = (*cur).next
		}
	}
}
	
LinkedList<string> List

List.push_back("1")
List.push_back("2")
List.push_back("3")
List.push_back("4")
List.push_back("5")

print("Size: " + List.size() + "\nList: ")
List.print_list()

List.pop_back()
List.pop_front()

print("\n\nSize: " + List.size() + "\nList: ")
List.print_list()

while (!List.empty())
	List.pop_back()

print("\n\nSize: " + List.size() + "\nList: ")
List.print_list()

print("\n\nALL OK")

//class atr
//{
//	ptr< ptr<double> > field
//
//	void init()
//	{
//		field = &(&.0)
//	}
//
//	void set(ptr<double> newField)
//	{
//		field = &newField
//	}
//
//	ptr<double> get()
//	{
//		return *field
//	}
//}
//
//atr test
//test.init()
//
//print(*test.get())
//print("\n")
//
//double ar = 2
//test.set(&ar)
//print(*test.get())






// class tetris
// {
// 	int a2
// 	int b2
// 	bool abc(int delta, ptr<ptr<bool> > gamma)
// 	{
// 		if (**gamma != false)
// 		{
// 			return delta
// 		}
// 		return **gamma
// 	}
// 	ptr<int> getPointer(int a)
// 	{
// 		return &a
// 	}
// }
// class tetris2
// {
// 	
// 	bool abc(int delta, ptr<ptr<bool> > gamma)
// 	{
// 		if (**gamma != false)
// 		{
// 			return delta
// 		}
// 		return **gamma
// 	}
// 	ptr<int> getPointer(int a)
// 	{
// 		return &a
// 	}
// 
// }
// int allOK(int a1, int b1)
// {
// 	int y
// 	print("ALL OK!!!!!!!!!!!!!")
// 	return 0
// }
// int allOK2(int a1, int b1)
// {
// 	int y
// 	print("ALL OK!!!!!!!!!!!!!")
// 	return 0
// }
// ptr<tetris> classTest
// ptr<tetris> classTest2
// ptr<tetris> classTest3
// ptr<tetris> classTest4
// ptr<tetris> classTest21
// ptr<tetris> classTest31
// ptr<tetris> classTest41
// ptr<ptr<bool> > gosha
// tetris ohMyTetris
// **gosha = ohMyTetris.abc(12, gosha)
// 
// 
// ptr< ptr<int> > pointer
// **pointer += *ohMyTetris.getPointer(2)
// ptr<ptr<string> > a
// print("data> ")
// int ab = 2
// input(**a)
